{"version":3,"sources":["components/SideBar.js","components/Cliente.js","components/Certificacion.js","components/Control.js","components/Cotizacion.js","components/DatosControl.js","components/DatosCotizacion.js","components/List_docs.js","components/Proyecto.js","components/clienteHasCotizacion.js","components/Remitos.js","components/TreeProyecto.js","components/form/SearchProyecto.js","components/searchProyecto.js","components/TreeCliente.js","components/form/SearchCliente.js","components/searchCliente.js","components/TreeCotizacion.js","components/form/SearchCotizacion.js","components/searchCotizacion.js","components/TreeControl.js","components/form/SearchControl.js","components/searchControl.js","components/TreeRemitos.js","components/form/SearchRemitos.js","components/searchRemitos.js","App.js","serviceWorker.js","index.js"],"names":["SideBar","className","to","aria-hidden","Component","jobs","cellEditProp","mode","blurToSave","afterSaveCell","selectRowProp","row","cellName","cellValue","a","settings","method","body","JSON","stringify","headers","Accept","url","id","fetch","fetchResponse","json","data","console","log","rowKeys","rows","i","length","options","page","sizePerPageList","text","value","sizePerPage","pageStartIndex","paginationSize","prePage","nextPage","firstPage","lastPage","prePageTitle","nextPageTitle","firstPageTitle","lastPageTitle","paginationPosition","afterDeleteRow","afterInsertRow","cliente","props","callApi","response","status","Error","message","push","nombre","codigoCliente","formatType","bind","this","then","res","setState","catch","err","cell","cellEdit","insertRow","pagination","exportCSV","deleteRow","selectRow","dataField","isKey","autoValue","editable","type","filter","delay","React","jobTypesCotizacion","jobTypesControl","fechaDeEmision","moment","format","certificacion","fecha1","control_id","control_cotizacion_id","numeroDePedido","proyecto","especialidad","moneda","costoHoraDoc","cantdeHs","cantdeDocs","porcentajeAvance","horasCertificadas","total_certificacion","callApiDroopCotizacion","titulo_cotiazacion","callApiDroopControl","numero_control","values","jobTypes","fecha_emision_proyectada","fecha_calificaion","control","fecha3","cotizacion_id","revision","numero_documento","numero_doc","codigo_doc_cliente","callApiDroop","fecha","cotizacion","jobTypesDocumentos","datosControl","descripcion_doc","revicion_inicial","cantidad_doc","HHUnidades","total","revision_unica","observacion","modificar_lista","proveedor","viatico","list_docs_id","callApiDroopDocumentos","datosCotizacion","numeroRecotizacion","proveerdor","list_docs","cantidad_de_doc","total_hh","lista_de_cable","fecha_fin","fehca_inicio","fecha2","numero_proyecto","jobTypesCliente","cliente_id","callApiDroopCliente","fecha_envio","remito","calificacion","TreeProyecto","searchData","changeLink","formatData","getAllDocsForCotizacion","result","state","id_cotizacion","children","cotizacionId","idContizacion","getAllDocsForControl","id_control","controlId","idControl","treeData","dataMap","dataMapValue","map","index","array","title","control_data","cotizaicon_data","controlData","cotizacionlData","proyectoData","mapP","Map","mapCoti","mapControl","arrayCotiIds","arrayConIds","item","has","proyecto_id","set","proyectoId","contro_id","style","height","onChange","onClick","NameForm","handleChange","target","onSubmit","handleSubmit","formContainer","TreeCliente","clienteData","TreeCotizacion","getAllRemitosForcotizacion","idRemito","TreeControl","getAllRemitosFromControl","getAllCertificacion","id_certificacion","idCertificacion","certificacionlId","id_remito","certificacion_data","certificacionlData","mapCerti","arrayCertificaionIds","certificacion_id","certificacion_name","certificacionId","Tree","remitoId","idCotizacion","App","exact","path","component","Proyecto","Cliente","Certificacion","Control","Cotizacion","DatosControl","DatosCotiazacion","List_docs","clienteHasCotizacion","Remitos","searchProyecto","searchCliente","searchCotizacion","searchControl","searchRemitos","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c90ea971.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/SideBar.css';\nimport {Link} from \"react-router-dom\";\n\nexport default class SideBar extends Component {\n    render() {\n        return (\n            <div className=\"sidebar-container sticky-top\">\n                <div className=\"sidebar-logo\">\n                    Ingecoop Alpha\n                </div>\n            <ul className=\"sidebar-navigation\">\n                <li className=\"header\">Navigation</li>\n                <li>\n                    <Link to=\"/\">\n                        <i className=\"fa fa-home\" aria-hidden=\"true\"></i>Listado de Proyecto\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/Cliente\">\n                        <i className=\"fa fa-tachometer\" aria-hidden=\"true\"></i>Listado de Cliente\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/Cotizacion\">\n                        <i className=\"fa fa-users\" aria-hidden=\"true\"></i>Listado de Cotizacion\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/Control\">\n                        <i className=\"fa fa-cog\" aria-hidden=\"true\"></i>Listado de Control\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/Certificacion\">\n                        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Listado de Certificacion\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/DatosCotizacion\">\n                        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Listado de Datos de Cotizacion\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/DatosControl\">\n                        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Listado de Datos de Control\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/ListDocs\">\n                        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Lista de documentos\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/Remitos\">\n                        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Lista de remitos\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/clienteHasCotizacion\">\n                        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Lista de clienteHasCotizacion\n                    </Link>\n                </li>\n                <li className=\"header\">Busquedas</li>\n                <li>\n                <Link to=\"/searchProyecto\">\n                    <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Proyecto\n                </Link>\n                </li>\n                <li>\n                <Link to=\"/searchCliente\">\n                    <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Cliente\n                </Link>\n                </li>\n                <li>\n                <Link to=\"/searchCotizacion\">\n                    <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Cotizacion\n                </Link>\n                </li>\n                <li>\n                <Link to=\"/searchControl\">\n                    <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Control\n                </Link>\n                </li>\n                <li>\n                <Link to=\"/searchRemitos\">\n                    <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Remitos\n                </Link>\n                </li>\n            </ul>\n            </div>\n      );\n    }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\nimport '../styles/fix.css';\n\nlet jobs = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\n\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/cliente/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/cliente`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/cliente/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: 5, value: 5\n  }, {\n    text: 10, value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n};\n\nexport default class cliente extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/cliente');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobs.push({\n        id: data[i].id,\n        nombre: data[i].nombre,\n        codigoCliente: data[i].codigoCliente\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='nombre' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>Nombre</TableHeaderColumn>\n        <TableHeaderColumn dataField='codigoCliente' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>codigoCliente</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}\n","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\nimport moment from 'moment';\n\n\nlet jobs = [];\nlet jobTypesCotizacion = [];\nlet jobTypesControl = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\n\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  if(cellName === \"fechaDeEmision\"){\n    row.fechaDeEmision = moment(cellValue).format('YYYY-MM-DD');\n  }\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/certificacion/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/certificacion`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/certificacion/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: 5, value: 5\n  }, {\n    text: 10, value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class certificacion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopCotizacion()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopControl()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/certificacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      let fecha1 = moment(data[i].fechaDeEmision).format('YYYY-MM-DD');\n      jobs.push({\n        id: data[i].id,\n        control_id: data[i].control_id,\n        control_cotizacion_id: data[i].control_cotizacion_id,\n        numeroDePedido: data[i].numeroDePedido,\n        proyecto: data[i].proyecto,\n        especialidad: data[i].especialidad,\n        fechaDeEmision: fecha1,\n        moneda: data[i].moneda,\n        costoHoraDoc: data[i].costoHoraDoc,\n        cantdeHs: data[i].cantdeHs,\n        cantdeDocs: data[i].cantdeDocs,\n        porcentajeAvance: data[i].porcentajeAvance,\n        horasCertificadas: data[i].horasCertificadas,\n        total_certificacion: data[i].total_certificacion\n      });\n    }\n  }\n  callApiDroopCotizacion = async () => {\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesCotizacion.push({\n        value: data[i].id,\n        text: data[i].titulo_cotiazacion\n      });\n    }\n  }\n\n  callApiDroopControl = async () => {\n    const response = await fetch('/control');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesControl.push({\n        value: data[i].id,\n        text: data[i].numero_control\n      });\n    }\n  }\n\n  render() {\n    // custom attributes on editor\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='control_id' editable={ { type: 'select', options: { values: jobTypesControl } } }>control_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='control_cotizacion_id' editable={ { type: 'select', options: { values: jobTypesCotizacion } } }>control_cotizacion_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='numeroDePedido' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>numeroDePedido</TableHeaderColumn>\n        <TableHeaderColumn dataField='proyecto' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>proyecto</TableHeaderColumn>\n        <TableHeaderColumn dataField='especialidad' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>especialidad</TableHeaderColumn>\n        <TableHeaderColumn dataField='fechaDeEmision' editable={ { type: 'date' } }>fechaDeEmision</TableHeaderColumn>\n        <TableHeaderColumn dataField='moneda' editable={ { type: 'input' } }>moneda</TableHeaderColumn>\n        <TableHeaderColumn dataField='costoHoraDoc' editable={ { type: 'input' } }>costoHoraDoc</TableHeaderColumn>\n        <TableHeaderColumn dataField='cantdeHs' editable={ { type: 'input' } }>cantdeHs</TableHeaderColumn>\n        <TableHeaderColumn dataField='cantdeDocs' editable={ { type: 'input' } }>cantdeDocs</TableHeaderColumn>\n        <TableHeaderColumn dataField='porcentajeAvance' editable={ { type: 'input' } }>porcentajeAvance</TableHeaderColumn>\n        <TableHeaderColumn dataField='horasCertificadas' editable={ { type: 'input' } }>horasCertificadas</TableHeaderColumn>\n        <TableHeaderColumn dataField='total_certificacion' editable={ { type: 'input' } }>total_certificacion</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\nimport moment from 'moment';\n\nlet jobs = [];\nlet jobTypes = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  if(cellName === \"fecha_emision_proyectada\"){\n    row.fecha_emision_proyectada = moment(cellValue).format('YYYY-MM-DD');\n  }else if(cellName === \"fecha_calificaion\"){\n    row.fecha_calificaion = moment(cellValue).format('YYYY-MM-DD');\n  }\n\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/control/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/control`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n      console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/control/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: 5, value: 5\n  }, {\n    text: 10, value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class control extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroop()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/control');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      let fecha1 = moment(data[i].fecha_emision_proyectada).format('YYYY-MM-DD');\n      let fecha3 = moment(data[i].fecha_calificaion).format('YYYY-MM-DD');\n      jobs.push({\n        id: data[i].id,\n        cotizacion_id: data[i].cotizacion_id,\n        fecha_emision_proyectada: fecha1,\n        revision: data[i].revision,\n        fecha_calificaion: fecha3,\n        numero_documento: data[i].numero_documento,\n        numero_control: data[i].numero_control,\n        numero_doc: data[i].numero_doc,\n        codigo_doc_cliente: data[i].codigo_doc_cliente\n      });\n    }\n  }\n\n  callApiDroop = async () => {\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypes.push({\n        value: data[i].id,\n        text: data[i].titulo_cotiazacion\n      });\n    }\n  }\n\n  render() {\n    // custom attributes on editor\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp } >\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='cotizacion_id' editable={ { type: 'select', options: { values: jobTypes } } }>cotizacion_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='fecha_emision_proyectada' editable={ { type: 'date' } }>fecha_emision_proyectada</TableHeaderColumn>\n        <TableHeaderColumn dataField='revision' editable={ { type: 'input' } }>revision</TableHeaderColumn>\n        <TableHeaderColumn dataField='fecha_calificaion' editable={ { type: 'date' } }>fecha_calificaion</TableHeaderColumn>\n        <TableHeaderColumn dataField='numero_documento' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>numero_documento</TableHeaderColumn>\n        <TableHeaderColumn dataField='numero_control' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>numero_control</TableHeaderColumn>\n        <TableHeaderColumn dataField='numero_doc' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>numero_doc</TableHeaderColumn>\n        <TableHeaderColumn dataField='codigo_doc_cliente' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>codigo_doc_cliente</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\nimport moment from 'moment';\n\nlet jobs = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  if(cellName === \"fecha\"){\n    row.fecha = moment(cellValue).format('YYYY-MM-DD');\n  }\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/cotizacion/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/cotizacion`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/cotizacion/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: '5', value: 5\n  }, {\n    text: '10', value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class cotizacion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      let fecha1 = moment(data[i].fecha).format('YYYY-MM-DD');\n      jobs.push({\n        id: data[i].id,\n        revision: data[i].revision,\n        fecha: fecha1,\n        titulo_cotiazacion: data[i].titulo_cotiazacion\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n      <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n      <TableHeaderColumn dataField='revision' editable={ { type: 'input' } }>revision</TableHeaderColumn>\n      <TableHeaderColumn dataField='fecha' editable={ { type: 'date' } }>fecha</TableHeaderColumn>\n      <TableHeaderColumn dataField='titulo_cotiazacion' editable={ { type: 'input' } }>titulo_cotiazacion</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\n\nlet jobs = [];\nlet jobTypesCotizacion = [];\nlet jobTypesDocumentos = [];\nlet jobTypesControl = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/datosControl/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/datosControl`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/datosControl/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: '5', value: 5\n  }, {\n    text: '10', value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class datosControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopCotizacion()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopDocumentos()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopControl()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/datosControl');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobs.push({\n        id: data[i].id,\n        descripcion_doc: data[i].descripcion_doc,\n        revicion_inicial: data[i].revicion_inicial,\n        cantidad_doc: data[i].cantidad_doc,\n        HHUnidades: data[i].HHUnidades,\n        total: data[i].total,\n        revision_unica: data[i].revision_unica,\n        observacion: data[i].observacion,\n        modificar_lista: data[i].modificar_lista,\n        proveedor: data[i].proveedor,\n        viatico: data[i].viatico,\n        control_id: data[i].control_id,\n        control_cotizacion_id: data[i].control_cotizacion_id,\n        list_docs_id: data[i].list_docs_id\n      });\n    }\n  }\n\n  callApiDroopCotizacion = async () => {\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesCotizacion.push({\n        value: data[i].id,\n        text: data[i].titulo_cotiazacion\n      });\n    }\n  }\n\n  callApiDroopDocumentos = async () => {\n    const response = await fetch('/list_docs');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesDocumentos.push({\n        value: data[i].id,\n        text: data[i].nombre\n      });\n    }\n  }\n\n  callApiDroopControl = async () => {\n    const response = await fetch('/control');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesControl.push({\n        value: data[i].id,\n        text: data[i].numero_control\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='descripcion_doc' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>descripcion_doc</TableHeaderColumn>\n        <TableHeaderColumn dataField='revicion_inicial' editable={ { type: 'input' } }>revicion_inicial</TableHeaderColumn>\n        <TableHeaderColumn dataField='cantidad_doc' editable={ { type: 'input' } }>cantidad_doc</TableHeaderColumn>\n        <TableHeaderColumn dataField='HHUnidades' editable={ { type: 'input' } }>HHUnidades</TableHeaderColumn>\n        <TableHeaderColumn dataField='total' editable={ { type: 'input' } }>total</TableHeaderColumn>\n        <TableHeaderColumn dataField='revision_unica' editable={ { type: 'input' } }>revision_unica</TableHeaderColumn>\n        <TableHeaderColumn dataField='observacion' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>observacion</TableHeaderColumn>\n        <TableHeaderColumn dataField='modificar_lista' editable={ { type: 'input' } }>modificar_lista</TableHeaderColumn>\n        <TableHeaderColumn dataField='proveedor' editable={ { type: 'input' } }>proveedor</TableHeaderColumn>\n        <TableHeaderColumn dataField='viatico' editable={ { type: 'input' } }>viatico</TableHeaderColumn>\n        <TableHeaderColumn dataField='control_id' editable={ { type: 'select', options: { values: jobTypesControl } } }>control_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='control_cotizacion_id' editable={ { type: 'select', options: { values: jobTypesCotizacion } } }>control_cotizacion_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='list_docs_id' editable={ { type: 'select', options: { values: jobTypesDocumentos } } }>list_docs_id</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\n\nlet jobs = [];\nlet jobTypesCotizacion = [];\nlet jobTypesDocumentos = [];\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/datosCotizacion/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/datosCotizacion`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/datosCotizacion/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: '5', value: 5\n  }, {\n    text: '10', value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class datosCotizacion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopCotizacion()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopDocumentos()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/datosCotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobs.push({\n        id: data[i].id,\n        numeroRecotizacion: data[i].numeroRecotizacion,\n        cotizacion_id: data[i].cotizacion_id,\n        descripcion_doc: data[i].descripcion_doc,\n        revicion_inicial: data[i].revicion_inicial,\n        cantidad_doc: data[i].cantidad_doc,\n        HHUnidades: data[i].HHUnidades,\n        total: data[i].total,\n        revision_unica: data[i].revision_unica,\n        observacion: data[i].observacion,\n        modificar_lista: data[i].modificar_lista,\n        proveerdor: data[i].proveerdor,\n        viatico: data[i].viatico,\n        list_docs_id: data[i].list_docs_id\n      });\n    }\n  }\n  callApiDroopCotizacion = async () => {\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesCotizacion.push({\n        value: data[i].id,\n        text: data[i].titulo_cotiazacion\n      });\n    }\n  }\n\n  callApiDroopDocumentos = async () => {\n    const response = await fetch('/list_docs');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesDocumentos.push({\n        value: data[i].id,\n        text: data[i].nombre\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='numeroRecotizacion'  editable={ { type: 'input' } }>numeroRecotizacion</TableHeaderColumn>\n        <TableHeaderColumn dataField='cotizacion_id'  editable={ { type: 'select', options: { values: jobTypesCotizacion } } }>cotizacion_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='descripcion_doc'  editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>descripcion_doc</TableHeaderColumn>\n        <TableHeaderColumn dataField='revicion_inicial'  editable={ { type: 'input' } }>revicion_inicial</TableHeaderColumn>\n        <TableHeaderColumn dataField='cantidad_doc'  editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>cantidad_doc</TableHeaderColumn>\n        <TableHeaderColumn dataField='HHUnidades'  editable={ { type: 'input' } }>HHUnidades</TableHeaderColumn>\n        <TableHeaderColumn dataField='total'  editable={ { type: 'input' } }>total</TableHeaderColumn>\n        <TableHeaderColumn dataField='revision_unica'  editable={ { type: 'input' } }>revision_unica</TableHeaderColumn>\n        <TableHeaderColumn dataField='observacion'  editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>observacion</TableHeaderColumn>\n        <TableHeaderColumn dataField='modificar_lista'  editable={ { type: 'input' } }>modificar_lista</TableHeaderColumn>\n        <TableHeaderColumn dataField='proveerdor'  editable={ { type: 'input' } }>proveerdor</TableHeaderColumn>\n        <TableHeaderColumn dataField='viatico'  editable={ { type: 'input' } }>viatico</TableHeaderColumn>\n        <TableHeaderColumn dataField='list_docs_id'  editable={ { type: 'select', options: { values: jobTypesDocumentos } } }>list_docs_id</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\n\nlet jobs = [];\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/list_docs/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/list_docs`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/list_docs/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: '5', value: 5\n  }, {\n    text: '10', value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class list_docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/list_docs');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobs.push({\n        id: data[i].id,\n        nombre: data[i].nombre,\n        cantidad_de_doc: data[i].cantidad_de_doc,\n        total_hh: data[i].total_hh,\n        especialidad: data[i].especialidad,\n        lista_de_cable: data[i].lista_de_cable\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='nombre' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>nombre</TableHeaderColumn>\n        <TableHeaderColumn dataField='cantidad_de_doc' editable={ { type: 'input' } }>cantidad_de_doc</TableHeaderColumn>\n        <TableHeaderColumn dataField='total_hh' editable={ { type: 'input' } }>total_hh</TableHeaderColumn>\n        <TableHeaderColumn dataField='especialidad' editable={ { type: 'input' } }>especialidad</TableHeaderColumn>\n        <TableHeaderColumn dataField='lista_de_cable' editable={ { type: 'input' } }>lista_de_cable</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}\n","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\nimport moment from 'moment';\n\nlet jobs = [];\nlet jobTypes = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  if(cellName === \"fecha_fin\"){\n    row.fecha_fin = moment(cellValue).format('YYYY-MM-DD');\n  }else if(cellName === \"fecha_inicio\"){\n    row.fehca_inicio = moment(cellValue).format('YYYY-MM-DD');\n  }\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/proyecto/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n      console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/proyecto`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n      console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/proyecto/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n        console.log(e);\n    }\n  }\n}\n\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: 5, value: 5\n  }, {\n    text: 10, value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class proyecto extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroop()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/proyecto');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      let fecha1 = moment(data[i].fehca_inicio).format('YYYY-MM-DD');\n      let fecha2 = moment(data[i].fecha_fin).format('YYYY-MM-DD');\n      jobs.push({\n        id: data[i].id,\n        nombre: data[i].nombre,\n        cotizacion_id: data[i].cotizacion_id,\n        numero_proyecto: data[i].numero_proyecto,\n        cliente: data[i].cliente,\n        fehca_inicio: fecha1,\n        fecha_fin: fecha2\n      });\n    }\n  }\n  callApiDroop = async () => {\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypes.push({\n        value: data[i].id,\n        text: data[i].titulo_cotiazacion\n      });\n    }\n  }\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='nombre' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>nombre</TableHeaderColumn>\n        <TableHeaderColumn dataField='numero_proyecto' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>numero_proyecto</TableHeaderColumn>\n        <TableHeaderColumn dataField='cliente' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>cliente</TableHeaderColumn>\n        <TableHeaderColumn dataField='fehca_inicio' editable={ { type: 'date' } }>fecha_inicio</TableHeaderColumn>\n        <TableHeaderColumn dataField='fecha_fin' editable={ { type: 'date' } }>fecha_fin</TableHeaderColumn>\n        <TableHeaderColumn dataField='cotizacion_id'  editable={ { type: 'select', options: { values: jobTypes } } }>cotizacion_id</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\n\nlet jobs = [];\nlet jobTypesCliente = [];\nlet jobTypesCotizacion = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/clienteHasCotizacion/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n      console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/clienteHasCotizacion`, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n      console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/clienteHasCotizacion/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n        console.log(data);\n    } catch (e) {\n        console.log(e);\n    }\n  }\n}\n\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: 5, value: 5\n  }, {\n    text: 10, value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class proyecto extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopCliente()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopCotizacion()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/clienteHasCotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobs.push({\n        id: data[i].id,\n        cliente_id: data[i].cliente_id,\n        cotizacion_id: data[i].cotizacion_id\n      });\n    }\n  }\n\n  callApiDroopCotizacion = async () => {\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesCotizacion.push({\n        value: data[i].id,\n        text: data[i].titulo_cotiazacion\n      });\n    }\n  }\n  \n  callApiDroopCliente = async () => {\n    const response = await fetch('/cliente');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesCliente.push({\n        value: data[i].id,\n        text: data[i].nombre\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='cliente_id' editable={ { type: 'select', options: { values: jobTypesCliente } } }>cliente_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='cotizacion_id' editable={ { type: 'select', options: { values: jobTypesCotizacion } } }>cotizacion_id</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","/* eslint max-len: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../styles/react-bootstrap-table.css';\nimport moment from 'moment';\n\nlet jobs = [];\nlet jobTypesControl = [];\nlet jobTypesCotizacion = [];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  afterSaveCell: onAfterSaveCell\n};\nconst selectRowProp = {\n  mode: 'checkbox'\n};\nasync function onAfterSaveCell(row, cellName, cellValue) {\n  if(cellName === \"fecha_envio\"){\n    row.fecha_envio = moment(cellValue).format('YYYY-MM-DD');\n  }\n  const settings = {\n    method: 'PUT',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  let url = \"/remitos/\" + row.id;\n  try {\n      const fetchResponse = await fetch(url, settings);\n      const data = await fetchResponse.json();\n      console.log(data);\n  } catch (e) {\n      console.log(e);\n  }\n}\nasync function onAfterInsertRow(row) {\n  const settings = {\n    method: 'POST',\n    body: JSON.stringify(row),\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n  };\n  try {\n      const fetchResponse = await fetch(`/remitos`, settings);\n      const data = await fetchResponse.json();\n  } catch (e) {\n      console.log(e);\n  }\n}\n\nasync function onAfterDeleteRow(rowKeys,rows) {\n  for(let i = 0; i<rowKeys.length; i++){\n    let url = '/remitos/' + rows[i].id;\n    const settings = {\n    method: 'DELETE'\n    };\n    try {\n        const fetchResponse = await fetch(url, settings);\n        const data = await fetchResponse.json();\n    } catch (e) {\n        console.log(e);\n    }\n  }\n}\n\nconst options = {\n  page: 1,  // which page you want to show as default\n  sizePerPageList: [ {\n    text: 5, value: 5\n  }, {\n    text: 10, value: 10\n  }, {\n    text: 'All', value: jobs.length\n  } ], // you can change the dropdown list for size per page\n  sizePerPage: 5,  // which size per page you want to locate as default\n  pageStartIndex: 1, // where to start counting the pages\n  paginationSize: 3,  // the pagination bar size.\n  prePage: 'Prev', // Previous page button text\n  nextPage: 'Next', // Next page button text\n  firstPage: 'First', // First page button text\n  lastPage: 'Last', // Last page button text\n  prePageTitle: 'Go to previous', // Previous page button title\n  nextPageTitle: 'Go to next', // Next page button title\n  firstPageTitle: 'Go to first', // First page button title\n  lastPageTitle: 'Go to Last', // Last page button title\n  paginationPosition: 'bottom',  // default is bottom, top and both is all available\n  // keepSizePerPageState: true //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\n  // hideSizePerPage: true > You can hide the dropdown for sizePerPage\n  // alwaysShowAllBtns: true // Always show next and previous button\n  // withFirstAndLast: false > Hide the going to First and Last page button\n  // hidePageListOnlyOnePage: true > Hide the page list if only one page.\n  afterDeleteRow: onAfterDeleteRow,\n  afterInsertRow: onAfterInsertRow\n  //handleConfirmDeleteRow: customConfirm REVISTAR CONFIRM\n};\n\nexport default class proyecto extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatType = this.formatType.bind(this);\n  }\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopControl()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n    this.callApiDroopCotizacion()\n      .then(res => this.setState({ response: res }))\n      .catch(err => console.log(err));\n  }\n\n  formatType(cell) {\n    return `TYPE_${cell}`;\n  }\n\n  callApi = async () => {\n    jobs = [];\n    const response = await fetch('/remitos');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      let fecha1 = moment(data[i].fecha_envio).format('YYYY-MM-DD');\n      jobs.push({\n        id: data[i].id,\n        remito: data[i].remito,\n        fecha_envio: fecha1,\n        calificacion: data[i].calificacion,\n        control_id: data[i].control_id,\n        control_cotizacion_id: data[i].control_cotizacion_id\n      });\n    }\n  }\n\n  callApiDroopCotizacion = async () => {\n    const response = await fetch('/cotizacion');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesCotizacion.push({\n        value: data[i].id,\n        text: data[i].titulo_cotiazacion\n      });\n    }\n  }\n\n  callApiDroopControl = async () => {\n    const response = await fetch('/control');\n    var data = await response.json();\n    if (response.status !== 200) throw Error(data.message);\n    for (let i = 0; i < data.length; i++) {\n      jobTypesControl.push({\n        value: data[i].id,\n        text: data[i].numero_control\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true } pagination={ true } options={ options } exportCSV={ true } deleteRow={ true } selectRow={ selectRowProp }>\n        <TableHeaderColumn dataField='id' isKey={ true } autoValue={ true }>ID</TableHeaderColumn>\n        <TableHeaderColumn dataField='remito' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>remito</TableHeaderColumn>\n        <TableHeaderColumn dataField='fecha_envio' editable={ { type: 'date' } }>fecha_envio</TableHeaderColumn>\n        <TableHeaderColumn dataField='calificacion' editable={ { type: 'input' } } filter={ { type: 'TextFilter', delay: 1000 } }>calificacion</TableHeaderColumn>\n        <TableHeaderColumn dataField='control_id' editable={ { type: 'select', options: { values: jobTypesControl } } }>control_id</TableHeaderColumn>\n        <TableHeaderColumn dataField='control_cotizacion_id' editable={ { type: 'select', options: { values: jobTypesCotizacion } } }>control_cotizacion_id</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nexport default class TreeProyecto extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeData:[],\n      id_control:[],\n      control_data:[],\n      id_cotizacion:[],\n      cotizaicon_data:[]\n    };\n    this.searchData = this.searchData.bind(this);\n    this.getAllDocsForCotizacion = this.getAllDocsForCotizacion.bind(this);\n    this.getAllDocsForControl = this.getAllDocsForControl.bind(this);\n  }\n\n  searchData = async () => {\n    let data = {\"id\":this.props.changeLink};\n    const settings = {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n      }\n    };\n    try {\n        const fetchResponse = await fetch(`/proyecto/all`, settings);\n        const data = await fetchResponse.json();\n        let response = this.formatData(data);\n        console.log(response);\n        let docsCotizacion = this.getAllDocsForCotizacion();\n        docsCotizacion.then(result => {\n          for(let a = 0;a<response.length;a++){\n            for(let i = 0; i< this.state.id_cotizacion.length; i++){\n              if(response[a].children[i].cotizacionId){\n                if(response[a].children[i].cotizacionId === result[a][0].idContizacion){\n                  response[a].children[i].children = result[a];\n               }\n              }\n            }\n          }\n        });\n        let docsControl = this.getAllDocsForControl();\n        docsControl.then(result => {\n          for(let a = 0;a<response.length;a++){\n            for(let i = 0; i< this.state.id_control.length; i++){\n              if(response[a].children[i].controlId){\n                if(response[a].children[i].controlId === result[a][0].idControl){\n                    response[a].children[i].children = result[a];\n                }\n              }\n            }\n          }\n        });\n        this.setState({treeData: response});\n    } catch (e) {\n        console.log(e);\n    }\n  }\n  getAllDocsForCotizacion = async () => {\n    let dataMap = [];\n    for(let i = 0; i< this.state.id_cotizacion.length; i++){\n      let data = {\"id\":this.state.id_cotizacion[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/cotizacion/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idContizacion:data.cotizacionId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n  getAllDocsForControl = async () =>{\n    let dataMap = [];\n      for(let i = 0; i< this.state.id_control.length; i++){\n      let data = {\"id\":this.state.id_control[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/control/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idControl: data.controlId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n\n  formatData(data){\n  const controlData = [];\n  const cotizacionlData = [];\n  const proyectoData = [];\n  const mapP = new Map();\n  const mapCoti = new Map();\n  const mapControl = new Map();\n  let arrayCotiIds = [];\n  let arrayConIds = [];\n\n  for (const item of data) {\n      if(!mapP.has(item.proyecto_id)){\n          mapP.set(item.proyecto_id, true);    // set any value to Map\n          proyectoData.push({\n              proyectoId: item.proyecto_id,\n              title: item.nombre,\n              children:[{}]\n          });\n      }\n    if(!mapCoti.has(item.cotizacion_id)){\n        mapCoti.set(item.cotizacion_id, true);    // set any value to Map\n        arrayCotiIds.push(item.cotizacion_id);\n        this.setState({id_cotizacion: arrayCotiIds});\n        cotizacionlData.push({\n          title:item.titulo_cotiazacion,\n          cotizacionId: item.cotizacion_id,\n          children:{}\n        });\n    }\n\n    if(!mapControl.has(item.contro_id)){\n      mapControl.set(item.contro_id, true);    // set any value to Map\n        arrayConIds.push(item.contro_id);\n        this.setState({id_control: arrayConIds});\n        controlData.push({\n          title:item.numero_control,\n          controlId:item.contro_id,\n          children:{}\n        });\n    }\n  }\n  let result = [...proyectoData];\n  for(let i = 0;i<proyectoData.length;i++){\n    result[i].children = [cotizacionlData[i],controlData[i]];\n  }\n  return result;\n  }\n\n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n        <button onClick={this.searchData} className=\"btn btn-primary\">Buscar</button>\n      </div>\n    );\n  }\n}","import React from \"react\";\n\n/* Import Components */\nimport Tree from \"../TreeProyecto\";\n\nexport default class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(values) {\n    this.setState({value: values.target.value});\n  }\n  render() {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n      </form>\n      <Tree changeLink={this.state.value}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport FormContainer from \"./form/SearchProyecto\";\n\n\nexport default class formContainer extends Component {\n  render() {\n    return (\n      <div className=\"col-md-6\">\n        <h3>Busqueda por Proyectos</h3>\n        <FormContainer />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nexport default class TreeCliente extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeData:[],\n      id_control:[],\n      control_data:[],\n      id_cotizacion:[],\n      cotizaicon_data:[]\n    };\n    this.searchData = this.searchData.bind(this);\n    this.getAllDocsForCotizacion = this.getAllDocsForCotizacion.bind(this);\n    this.getAllDocsForControl = this.getAllDocsForControl.bind(this);\n  }\n\n  searchData = async () => {\n    let data = {\"id\":this.props.changeLink};\n    const settings = {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n      }\n    };\n    try {\n        const fetchResponse = await fetch(`/cliente/all`, settings);\n        const data = await fetchResponse.json();\n        let response = this.formatData(data);\n        let docsCotizacion = this.getAllDocsForCotizacion();\n        docsCotizacion.then(result => {\n          for(let a = 0;a<response.length;a++){\n            for(let i = 0; i< this.state.id_cotizacion.length; i++){\n              if(response[a].children[i].cotizacionId){\n                if(response[a].children[i].cotizacionId === result[a][0].idContizacion){\n                  response[a].children[i].children = result[a];\n               }\n              }\n            }\n          }\n        });\n        let docsControl = this.getAllDocsForControl();\n        docsControl.then(result => {\n          for(let a = 0;a<response.length;a++){\n            for(let i = 0; i< this.state.id_control.length; i++){\n              if(response[a].children[i].controlId){\n                if(response[a].children[i].controlId === result[a][0].idControl){\n                    response[a].children[i].children = result[a];\n                }\n              }\n            }\n          }\n        });\n        this.setState({treeData: response});\n    } catch (e) {\n        console.log(e);\n    }\n  }\n  getAllDocsForCotizacion = async () => {\n    let dataMap = [];\n    for(let i = 0; i< this.state.id_cotizacion.length; i++){\n      let data = {\"id\":this.state.id_cotizacion[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/cotizacion/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idContizacion:data.cotizacionId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n  getAllDocsForControl = async () =>{\n    let dataMap = [];\n      for(let i = 0; i< this.state.id_control.length; i++){\n      let data = {\"id\":this.state.id_control[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/control/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idControl: data.controlId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n\n  formatData(data){\n  const controlData = [];\n  const cotizacionlData = [];\n  const clienteData = [];\n  const mapCoti = new Map();\n  const mapControl = new Map();\n  let arrayCotiIds = [];\n  let arrayConIds = [];\n\n  for (const item of data) {\n    clienteData.push({\n        proyectoId: item.cliente_id,\n        title: item.nombre,\n        children:[{}]\n    });\n    if(!mapCoti.has(item.cotizacion_id)){\n        mapCoti.set(item.cotizacion_id, true);    // set any value to Map\n        arrayCotiIds.push(item.cotizacion_id);\n        this.setState({id_cotizacion: arrayCotiIds});\n        cotizacionlData.push({\n          title:item.titulo_cotiazacion,\n          cotizacionId: item.cotizacion_id,\n          children:{}\n        });\n    }\n\n    if(!mapControl.has(item.contro_id)){\n      mapControl.set(item.contro_id, true);    // set any value to Map\n        arrayConIds.push(item.contro_id);\n        this.setState({id_control: arrayConIds});\n        controlData.push({\n          title:item.numero_control,\n          controlId:item.contro_id,\n          children:{}\n        });\n    }\n  }\n  let result = [...clienteData];\n  for(let i = 0;i<clienteData.length;i++){\n    result[i].children = [cotizacionlData[i],controlData[i]];\n  }\n  return result;\n  }\n\n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n        <button onClick={this.searchData} className=\"btn btn-primary\">Busca</button>\n      </div>\n    );\n  }\n}","import React from \"react\";\n\n/* Import Components */\nimport Tree from \"../TreeCliente\";\n\nexport default class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(values) {\n    this.setState({value: values.target.value});\n  }\n  render() {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n      </form>\n      <Tree changeLink={this.state.value}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport FormContainer from \"./form/SearchCliente\";\n\nexport default class formContainer extends Component {\n  render() {\n    return (\n      <div className=\"col-md-6\">\n        <h3>Busqueda por Cliente</h3>\n        <FormContainer />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nexport default class TreeCotizacion extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeData:[],\n      id_control:[],\n      control_data:[],\n      id_cotizacion:[],\n      cotizaicon_data:[]\n    };\n    this.searchData = this.searchData.bind(this);\n    this.getAllDocsForCotizacion = this.getAllDocsForCotizacion.bind(this);\n    this.getAllDocsForControl = this.getAllDocsForControl.bind(this);\n  }\n\n  searchData = async () => {\n    let data = {\"id\":this.props.changeLink};\n    const settings = {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n      }\n    };\n    try {\n      const fetchResponse = await fetch(`/cotizacion/childsControl`, settings);\n        const data = await fetchResponse.json();\n        let response = this.formatData(data);\n        let docsCotizacion = this.getAllDocsForCotizacion();\n        docsCotizacion.then(result => {\n          for(let a = 0;a<response.length;a++){\n            for(let i = 0;i<result.length;i++){\n              if(response[a].cotizacionId === result[i][0].idContizacion){\n                response[a].children = result[i];\n              }\n            }\n          }\n          //this.setState({treeData: response});\n        });\n        let docsControl = this.getAllDocsForControl();\n        docsControl.then(result => {\n          for(let a = 0;a<response.length;a++){\n            for(let i = 0;i<result.length;i++){\n              if(response[a].controlId === result[i][0].idControl){\n                response[a].children = result[i];\n              }\n            }\n          }\n          //this.setState({treeData: response});\n        });\n        let docsRemitos = this.getAllRemitosForcotizacion();\n        docsRemitos.then(result => {\n          for(let i = 0;i<result.length;i++){\n            response.push(result[0][i]);\n          }\n          this.setState({treeData: response});\n        });\n    } catch (e) {\n        console.log(e);\n    }\n  }\n  getAllRemitosForcotizacion = async () => {\n    let dataMap = [];\n    for(let i = 0; i< this.state.id_cotizacion.length; i++){\n      let data = {\"id\":this.state.id_cotizacion[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/remitos/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idRemito:data.cotizacionId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n  getAllDocsForCotizacion = async () => {\n    let dataMap = [];\n    for(let i = 0; i< this.state.id_cotizacion.length; i++){\n      let data = {\"id\":this.state.id_cotizacion[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/cotizacion/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idContizacion:data.cotizacionId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n  getAllDocsForControl = async () =>{\n    let dataMap = [];\n      for(let i = 0; i< this.state.id_control.length; i++){\n      let data = {\"id\":this.state.id_control[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/control/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idControl: data.controlId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n\n  formatData(data){\n    const controlData = [];\n    const cotizacionlData = [];\n    const mapCoti = new Map();\n    const mapControl = new Map();\n    let arrayCotiIds = [];\n    let arrayConIds = [];\n  \n    for (const item of data) {\n      if(!mapCoti.has(item.cotizacion_id)){\n          mapCoti.set(item.cotizacion_id, true);    // set any value to Map\n          arrayCotiIds.push(item.cotizacion_id);\n          this.setState({id_cotizacion: arrayCotiIds});\n          cotizacionlData.push({\n            title:item.titulo_cotiazacion,\n            cotizacionId: item.cotizacion_id,\n            children:{}\n          });\n      }\n  \n      if(!mapControl.has(item.contro_id)){\n        mapControl.set(item.contro_id, true);    // set any value to Map\n          arrayConIds.push(item.contro_id);\n          this.setState({id_control: arrayConIds});\n          controlData.push({\n            title:item.numero_control,\n            controlId:item.contro_id,\n            children:{}\n          });\n      }\n    }\n    let result = [...cotizacionlData,...controlData];\n    return result;\n  }\n\n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n        <button onClick={this.searchData} className=\"btn btn-primary\">Buscar</button>\n      </div>\n    );\n  }\n}","import React from \"react\";\n\n/* Import Components */\nimport Tree from \"../TreeCotizacion\";\n\nexport default class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(values) {\n    this.setState({value: values.target.value});\n  }\n  render() {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n      </form>\n      <Tree changeLink={this.state.value}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport FormContainer from \"./form/SearchCotizacion\";\n\nexport default class formContainer extends Component {\n  render() {\n    return (\n      <div className=\"col-md-6\">\n        <h3>Busqueda por Cotizacion</h3>\n        <FormContainer />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nexport default class TreeControl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeData:[],\n      id_control:[],\n      control_data:[],\n      id_remito:[],\n      id_certificacion:[],\n      certificacion_data:[]\n    };\n    this.searchData = this.searchData.bind(this);\n    this.getAllRemitosFromControl = this.getAllRemitosFromControl.bind(this);\n    this.getAllCertificacion = this.getAllCertificacion.bind(this);\n    this.getAllDocsForControl = this.getAllDocsForControl.bind(this);\n  }\n\n  searchData = async () => {\n    let data = {\"id\":this.props.changeLink};\n    const settings = {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n      }\n    };\n    try {\n        const fetchResponse = await fetch(`/control/getCertificadosFormControl`, settings);\n        const data = await fetchResponse.json();\n        let response = this.formatData(data);\n        let docsControl = this.getAllDocsForControl();\n        docsControl.then(result => {\n          for(let a = 0;a<response.length;a++){\n            for(let i = 0;i<result.length;i++){\n              if(response[a].controlId === result[i][0].idControl){\n                response[a].children = result[i];\n              }\n            }\n          }\n        });\n        let docsRemitos = this.getAllRemitosFromControl();\n        docsRemitos.then(result => {\n          for(let i = 0;i<result.length;i++){\n            if(result[0][i]){\n              response.push(result[0][i]);\n            }\n          }\n          this.setState({treeData: response});\n        });\n    } catch (e) {\n        console.log(e);\n    }\n  }\n\n  getAllRemitosFromControl = async () => {\n    let dataMap = [];\n    for(let i = 0; i< this.state.id_control.length; i++){\n      let data = {\"id\":this.state.id_control[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/remitos/fromControl`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idRemito:data.controlId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n\n\n\n  getAllDocsForControl = async () =>{\n    let dataMap = [];\n      for(let i = 0; i< this.state.id_control.length; i++){\n      let data = {\"id\":this.state.id_control[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/control/getListDocsFormControl`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idControl: data.controlId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n\n  getAllCertificacion = async () =>{\n    let dataMap = [];\n      for(let i = 0; i< this.state.id_certificacion.length; i++){\n      let data = {\"id\":this.state.id_certificacion[i]};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/certifiacion/controlChild`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idCertificacion: data.certificacionlId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    }\n    return dataMap;\n  }\n\n  formatData(data){\n    const controlData = [];\n    const certificacionlData = [];\n    const mapCerti = new Map();\n    const mapControl = new Map();\n    let arrayCertificaionIds = [];\n    let arrayConIds = [];\n    for (const item of data) {\n      if(!mapCerti.has(item.certificacion_id)){\n        mapCerti.set(item.certificacion_id, true);    // set any value to Map\n          arrayCertificaionIds.push(item.certificacion_id);\n          this.setState({id_cotizacion: arrayCertificaionIds});\n          certificacionlData.push({\n            title:item.certificacion_name,\n            certificacionId: item.certificacion_id,\n            children:{}\n          });\n      }\n      if(!mapControl.has(item.contro_id)){\n        mapControl.set(item.contro_id, true);    // set any value to Map\n          arrayConIds.push(item.control_id);\n          this.setState({id_control: arrayConIds});\n          controlData.push({\n            title:item.nombre,\n            controlId:item.control_id,\n            children:{}\n          });\n      }\n    }\n    let result = [...controlData,...certificacionlData];\n    return result;\n  }\n\n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n        <button onClick={this.searchData} className=\"btn btn-primary\">Buscar</button>\n      </div>\n    );\n  }\n}","import React from \"react\";\n\n/* Import Components */\nimport Tree from \"../TreeControl\";\n\nexport default class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(values) {\n    this.setState({value: values.target.value});\n  }\n  render() {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n      </form>\n      <Tree changeLink={this.state.value}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport FormContainer from \"./form/SearchControl\";\n\nexport default class formContainer extends Component {\n  render() {\n    return (\n      <div className=\"col-md-6\">\n        <h3>Busqueda por Control</h3>\n        <FormContainer />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nexport default class Tree extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeData:[],\n      id_control:[],\n      control_data:[],\n      id_cotizacion:[],\n      id_remito:[],\n      cotizaicon_data:[]\n    };\n    this.searchData = this.searchData.bind(this);\n    this.getAllDocsForCotizacion = this.getAllDocsForCotizacion.bind(this);\n    this.getAllDocsForControl = this.getAllDocsForControl.bind(this);\n  }\n\n  getAllDocsForCotizacion = async () => {\n    let dataMap = [];\n      let data = {\"id\":this.state.id_cotizacion};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/cotizacion/all`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idContizacion:data.cotizacionId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    return dataMap;\n  }\n\n  getAllDocsForControl = async () =>{\n    let dataMap = [];\n      let data = {\"id\":this.state.id_control};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n      try {\n          const fetchResponse = await fetch(`/control/getListDocsFormControl`, settings);\n          const data = await fetchResponse.json();\n          let dataMapValue = data.map(function (data, index, array) {\n            return {id:data.id,title:data.nombre,idControl: data.controlId};\n          });\n          dataMap.push(dataMapValue);\n      } catch (e) {\n          console.log(e);\n      }\n    return dataMap;\n  }\n\n  searchData = async () => {\n      let data = {\"id\":this.props.changeLink};\n      const settings = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n      };\n    try {\n        const fetchResponse = await fetch('/remitos/dataFromRemitos', settings);\n        let data = await fetchResponse.json();\n        let response = this.formatData(data);\n        \n        let docsCotizacion = this.getAllDocsForCotizacion();\n        docsCotizacion.then(result => {\n          response[0][2].children = result[0];\n        });\n        let docsControl = this.getAllDocsForControl();\n        docsControl.then(result => {\n          response[0][1].children = result[0];\n          this.setState({treeData: response[0]});\n        });\n    } catch (e) {\n        console.log(e);\n    }\n  }\n\n  formatData(data){\n  let dataMapValue = data.map(function (data, index, array) {\n    return [{remitoId:data.id,title:data.nombre},{title:data.numero_control,idControl: data.controlId,children:[]},{title:data.titulo_cotiazacion,idCotizacion: data.cotizacionId,children:[]}];\n  });\n  this.setState({id_control: dataMapValue[0][1].idControl});\n  this.setState({id_cotizacion: dataMapValue[0][2].idCotizacion});\n  return dataMapValue;\n  }\n\n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n        <button onClick={this.searchData} className=\"btn btn-primary\">Buscar</button>\n      </div>\n    );\n  }\n}","import React from \"react\";\n\n/* Import Components */\nimport Tree from \"../TreeRemitos\";\n\nexport default class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(values) {\n    this.setState({value: values.target.value});\n  }\n  render() {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n      </form>\n      <Tree changeLink={this.state.value}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport FormContainer from \"./form/SearchRemitos\";\n\nexport default class formContainer extends Component {\n  render() {\n    return (\n      <div className=\"col-md-6\">\n        <h3>Busqueda por Remitos</h3>\n        <FormContainer />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SideBar from './components/SideBar';\nimport Cliente from './components/Cliente';\nimport Certificacion from './components/Certificacion';\nimport Control from './components/Control';\nimport Cotizacion from './components/Cotizacion';\nimport DatosControl from './components/DatosControl';\nimport DatosCotiazacion from './components/DatosCotizacion';\nimport List_docs from './components/List_docs';\nimport Proyecto from './components/Proyecto';\nimport clienteHasCotizacion from './components/clienteHasCotizacion';\nimport Remitos from './components/Remitos';\nimport searchProyecto from './components/searchProyecto';\nimport searchCliente from './components/searchCliente';\nimport searchCotizacion from './components/searchCotizacion';\nimport searchControl from './components/searchControl';\nimport searchRemitos from './components/searchRemitos';\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nexport default class App extends Component {\nrender() {\n    return (\n      <div className=\"container-fluid h-100\">\n      <div className=\"row\">\n        <div id=\"sideBar\" className=\"col-sm-2\"><SideBar /></div>\n        <div id=\"Container\" className=\"col-md-10\">\n        <Switch>\n          <Route exact path=\"/\" component={Proyecto} />\n          <Route path=\"/Cliente\" component={Cliente} />\n          <Route path=\"/Certificacion\" component={Certificacion} />\n          <Route path=\"/Control\" component={Control} />\n          <Route path=\"/Cotizacion\" component={Cotizacion} />\n          <Route path=\"/DatosControl\" component={DatosControl} />\n          <Route path=\"/DatosCotizacion\" component={DatosCotiazacion} />\n          <Route path=\"/ListDocs\" component={List_docs} />\n          <Route path=\"/clienteHasCotizacion\" component={clienteHasCotizacion} />\n          <Route path=\"/Remitos\" component={Remitos} />\n          <Route path=\"/searchProyecto\" component={searchProyecto} />\n          <Route path=\"/searchCliente\" component={searchCliente} />\n          <Route path=\"/searchCotizacion\" component={searchCotizacion} />\n          <Route path=\"/searchControl\" component={searchControl} />\n          <Route path=\"/searchRemitos\" component={searchRemitos} />\n        </Switch>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import NavBar from './components/NavBar';\nimport App from  './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}